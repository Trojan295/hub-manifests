ocfVersion: 0.0.1
revision: 0.1.0
kind: Implementation
metadata:
  prefix: cap.implementation.atlassian.bitbucket
  name: install
  displayName: "Bitbucket"
  description: "Git-based source code repository hosting service"
  documentationURL: https://confluence.atlassian.com/bitbucketserver
  supportURL: https://support.atlassian.com/bitbucket-server/
  license:
    name: "Apache 2.0"
  maintainers:
    - email: team-dev@capact.io
      name: Capact Dev Team
      url: https://capact.io

spec:
  appVersion: "7.7.0-jdk11"

  additionalInput:
    typeInstances:
      postgresql:
        typeRef:
          path: cap.type.database.postgresql.config
          revision: 0.1.0
        verbs: ["get"]
      elasticsearch:
        typeRef:
          path: cap.type.analytics.elasticsearch.config
          revision: 0.1.0
        verbs: ["get"]
    parameters:
      typeRef:
        path: cap.type.atlassian.bitbucket.helm.install-input
        revision: 0.1.0

  outputTypeInstanceRelations:
    bitbucket-config:
      uses:
        - bitbucket-helm-release
        - database
        - elasticsearch
        - postgresql
        - user

  implements:
    - path: cap.interface.productivity.bitbucket.install
      revision: 0.1.0

  requires:
    cap.core.type.platform:
      oneOf:
        - name: kubernetes
          revision: 0.1.0

  imports:
    - interfaceGroupPath: cap.interface.runner.argo
      alias: argo
      methods:
        - name: run
          revision: 0.1.0
    - interfaceGroupPath: cap.interface.runner.helm
      alias: helm
      methods:
        - name: install
          revision: 0.1.0
    - interfaceGroupPath: cap.interface.database.postgresql
      alias: postgresql
      methods:
        - name: install
          revision: 0.1.0
        - name: create-db
          revision: 0.1.0
        - name: create-user
          revision: 0.1.0
    - interfaceGroupPath: cap.interface.templating.jinja2
      alias: jinja2
      methods:
        - name: template
          revision: 0.1.0
    - interfaceGroupPath: cap.interface.analytics.elasticsearch
      alias: elasticsearch
      methods:
        - name: install
          revision: 0.1.0

  action:
    runnerInterface: argo.run
    args:
      workflow:
        entrypoint: bitbucket-install
        templates:
          - name: bitbucket-install
            inputs:
              artifacts:
                - name: input-parameters
                - name: additional-parameters
                  optional: true
                - name: postgresql
                  optional: true
                - name: elasticsearch
                  optional: true
            steps:
              - - name: create-license-args
                  capact-action: jinja2.template
                  arguments:
                    artifacts:
                      - name: template
                        raw:
                          data: |
                            <% if additionalInput.bitbucket.licenseKeyInBase64 %>
                            apiVersion: v1
                            kind: Secret
                            metadata:
                              generateName: bitbucket-license-
                            data:
                              license-key: <@ additionalInput.bitbucket.licenseKeyInBase64 @>
                            <% endif %>
                      - name: input-parameters
                        from: "{{inputs.artifacts.additional-parameters}}"
                      - name: configuration
                        raw:
                          data: |
                            prefix: additionalInput
              - - name: create-license-secret
                  template: kubectl-create
                  arguments:
                    artifacts:
                      - name: manifest
                        from: "{{steps.create-license-args.outputs.artifacts.render}}"

              - - name: create-sysadmin-args
                  capact-action: jinja2.template
                  arguments:
                    artifacts:
                      - name: template
                        raw:
                          data: |
                            <% if input.bitbucket.sysadminCredentials %>
                            apiVersion: v1
                            kind: Secret
                            metadata:
                              generateName: sysadmin-credentials-
                            stringData:
                              username: <@ input.bitbucket.sysadminCredentials.username @>
                              password: <@ input.bitbucket.sysadminCredentials.password @>
                              displayName: <@ input.bitbucket.sysadminCredentials.displayName @>
                              emailAddress: <@ input.bitbucket.sysadminCredentials.emailAddress @>
                            <% endif %>
                      - name: input-parameters
                        from: "{{inputs.artifacts.input-parameters}}"
                      - name: configuration
                        raw:
                          data: |
                            prefix: input
              - - name: create-sysadmin-secret
                  template: kubectl-create
                  arguments:
                    artifacts:
                      - name: manifest
                        from: "{{steps.create-sysadmin-args.outputs.artifacts.render}}"

              - - name: install-db
                  capact-when: postgresql == nil # conditional execution
                  capact-action: postgresql.install
                  arguments:
                    artifacts:
                      - name: input-parameters
                        raw:
                          data: |
                            superuser:
                              username: superuser
                            defaultDBName: postgres
                  capact-outputTypeInstances:
                    - name: postgresql
                      from: postgresql

              - - name: create-user
                  capact-action: postgresql.create-user
                  capact-outputTypeInstances:
                    - name: user
                      from: user
                  arguments:
                    artifacts:
                      - name: postgresql
                        from: "{{steps.install-db.outputs.artifacts.postgresql}}"
                      - name: user-input
                        raw:
                          data: |
                            name: bitbucket

              - - name: render-create-db-args
                  capact-action: jinja2.template
                  arguments:
                    artifacts:
                      - name: template
                        raw:
                          data: |
                            name: bitbucketdb
                            owner: "<@ name @>"
                      - name: input-parameters
                        from: "{{steps.create-user.outputs.artifacts.user}}"
                      - name: configuration
                        raw:
                          data: |

              - - name: create-db
                  capact-action: postgresql.create-db
                  capact-outputTypeInstances:
                    - name: database
                      from: database
                  arguments:
                    artifacts:
                      - name: postgresql
                        from: "{{steps.install-db.outputs.artifacts.postgresql}}"
                      - name: database-input
                        from: "{{steps.render-create-db-args.outputs.artifacts.render}}"

              - - name: install-elasticsearch
                  capact-when: elasticsearch == nil # conditional execution
                  capact-action: elasticsearch.install
                  arguments:
                    artifacts:
                      - name: input-parameters
                        raw:
                          data: |

                  capact-outputTypeInstances:
                    - name: elasticsearch
                      from: elasticsearch

              - - name: fill-default-input
                  capact-action: jinja2.template
                  arguments:
                    artifacts:
                      - name: input-parameters
                        from: "{{inputs.artifacts.input-parameters}}"
                      - name: template
                        raw:
                          data: |
                            host: <@ input.host @>
                      - name: configuration
                        raw:
                          data: |
                            prefix: input

              - - name: render-bitbucket-helm-args
                  capact-action: jinja2.template
                  arguments:
                    artifacts:
                      - name: template
                        raw:
                          data: |
                            generateName: true
                            chart:
                              name: "bitbucket"
                              repo: "https://atlassian-labs.github.io/data-center-helm-charts"
                            output:
                              goTemplate: |
                                version: "{{ .Values.image.tag }}"
                                host: "{{ .Values.ingress.host }}"

                            values:
                              replicaCount: <@ additionalInput.replicaCount | default(1) @>

                              image:
                                repository: <@ additionalInput.image.repository | default("atlassian/bitbucket-server") @>
                                pullPolicy: <@ additionalInput.image.pullPolicy | default("IfNotPresent") @>
                                tag: <@ additionalInput.image.tag | default("7.12.0-jdk11") @>

                              serviceAccount:
                                name: <@ additionalInput.serviceAccount.name | default("") @>
                                create: <@ additionalInput.serviceAccount.create | default(true) @>
                                imagePullSecrets: <@ additionalInput.serviceAccount.imagePullSecrets | default([]) @>
                                clusterRole:
                                  name: <@ additionalInput.serviceAccount.clusterRole.name | default("") @>
                                  create: <@ additionalInput.serviceAccount.clusterRole.create | default(true) @>
                                clusterRoleBinding:
                                  name: <@ additionalInput.serviceAccount.clusterRoleBinding.name | default("") @>
                                  create: <@ additionalInput.serviceAccount.clusterRoleBinding.create | default(true) @>

                              database:
                                url: jdbc:postgresql://<@ installdb.host @>:<@ installdb.port @>/<@ createdb.name @>
                                driver: org.postgresql.Driver
                                credentials:
                                  secretName: <@ additionalInput.database.credentials.secretName | default("") @>
                                  usernameSecretKey: <@ additionalInput.database.credentials.usernameSecretKey | default("username") @>
                                  passwordSecretKey: <@ additionalInput.database.credentials.passwordSecretKey | default("password") @>

                              bitbucket:
                                service:
                                  port: <@ additionalInput.bitbucket.service.port | default(80) @>
                                  type: <@ additionalInput.bitbucket.service.type | default("ClusterIP") @>
                                securityContext:
                                  enabled: <@ additionalInput.bitbucket.securityContext.enabled | default(true) @>
                                  gid: <@ additionalInput.bitbucket.securityContext.gid | default("2003") @>
                                ports:
                                  http: <@ additionalInput.bitbucket.ports.http | default(7990) @>
                                  ssh: <@ additionalInput.bitbucket.ports.ssh | default(7999) @>
                                  hazelcast: <@ additionalInput.bitbucket.ports.hazelcast | default(5701) @>
                                license:
                                  secretName: <@ optionalLicense.metadata.name @>
                                  secretKey: "license-key"
                                sysadminCredentials:
                                  secretName: <@ optionalSysadmin.metadata.name @>
                                  usernameSecretKey: "username"
                                  passwordSecretKey: "password"
                                  displayNameSecretKey: "displayName"
                                  emailAddressSecretKey: "emailAddress"
                                clustering:
                                  enabled: <@ additionalInput.bitbucket.clustering.enabled | default(false) @>

                                elasticSearch:
                                  baseUrl: <@ elastic.protocol @>://<@ elastic.host @>:<@ elastic.port @>
                                  credentials:
                                    secretName: <@ elastic.basicAuthSecretName @>
                                    usernameSecreyKey: "username"
                                    passwordSecretKey: "password"

                                resources:
                                  jvm:
                                    maxHeap: <@ additionalInput.bitbucket.resources.jvm.maxHeap | default("1g") @>
                                    minHeap: <@ additionalInput.bitbucket.resources.jvm.minHeap | default("1g") @>
                                  <% if additionalInput.bitbucket.resources.container %>
                                  container: <@ additionalInput.bitbucket.resources.container @>
                                  <% else %>
                                  container:
                                    limits:
                                      cpu: "4"
                                      memory: "6G"
                                    requests:
                                      cpu: "1"
                                      memory: "3G"
                                  <% endif %>

                                additionalLibraries: <@ additionalInput.bitbucket.additionalLibraries | default([]) @>
                                additionalBundledPlugins: <@ additionalInput.bitbucket.additionalBundledPlugins | default([]) @>
                                additionalVolumeMounts: <@ additionalInput.bitbucket.additionalVolumeMounts | default([]) @>
                                additionalEnvironmentVariables:
                                - name: JDBC_USER
                                  value: <@ user.name @>
                                - name: JDBC_PASSWORD
                                  value: <@ user.password @>

                              <% set ingressCreate = additionalInput.ingress.create | default(true) %>
                              ingress:
                                create: <@ingressCreate @>
                                nginx: <@ additionalInput.ingress.nginx | default(true) @>
                                host: <@ input.host @>
                                https: <@ additionalInput.ingress.https | default(true) @>
                                <% if ingressCreate -%>
                                tlsSecretName: bitbucket-server-tls-<@ random_word(length=5) @>
                                annotations:
                                  acmechallengetype: http01
                                  cert-manager.io/cluster-issuer: letsencrypt
                                  kubernetes.io/tls-acme: "true"
                                  nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
                                  nginx.ingress.kubernetes.io/affinity: "cookie"
                                <%- endif %>

                              fluentd:
                                enabled: <@ additionalInput.fluentd.enabled | default(false) @>
                                imageName: <@ additionalInput.fluentd.imageName | default("fluent/fluentd-kubernetes-daemonset:v1.11.5-debian-elasticsearch7-1.2") @>
                                elasticsearch:
                                  hostname: <@ additionalInput.fluentd.elasticsearch.hostname | default("") @>

                              podAnnotations: <@ additionalInput.podAnnotations | default({}) @>

                              volumes:
                                localHome:
                                  persistentVolumeClaim:
                                    create: <@ additionalInput.volumes.localHome.persistentVolumeClaim.create | default(false) @>
                                    storageClassName: <@ additionalInput.volumes.localHome.persistentVolumeClaim.storageClassName | default("") @>
                                    resources:
                                      requests:
                                        storage: <@ additionalInput.volumes.localHome.persistentVolumeClaim.resources.requests.storage | default("1Gi") @>
                                  customVolume: <@ additionalInput.volumes.localHome.customVolume | default({}) @>
                                  mountPath: <@ additionalInput.volumes.localHome.mountPath | default("/var/atlassian/application-data/bitbucket") @>
                                sharedHome:
                                  persistentVolume:
                                    create: <@ additionalInput.volumes.sharedHome.persistentVolume.create | default(false) @>
                                    mountOptions: <@ additionalInput.volumes.sharedHome.persistentVolume.mountOptions | default([]) @>
                                    nfs:
                                      server: <@ additionalInput.volumes.sharedHome.persistentVolume.nfs.server | default("") @>
                                      path: <@ additionalInput.volumes.sharedHome.persistentVolume.nfs.path | default("") @>
                                  persistentVolumeClaim:
                                    create: <@ additionalInput.volumes.sharedHome.persistentVolumeClaim.create | default(false) @>
                                    storageClassName: <@ additionalInput.volumes.sharedHome.persistentVolumeClaim.storageClassName | default("") @>
                                    volumeName: <@ additionalInput.volumes.sharedHome.persistentVolumeClaim.volumeName | default("") @>
                                    resources:
                                      requests:
                                        storage: <@ additionalInput.volumes.sharedHome.persistentVolumeClaim.resources.requests.storage | default("1Gi") @>
                                  customVolume: <@ additionalInput.volumes.sharedHome.customVolume | default({}) @>
                                  mountPath: <@ additionalInput.volumes.sharedHome.mountPath | default("/var/atlassian/application-data/shared-home") @>
                                  subPath: <@ additionalInput.volumes.sharedHome.subPath | default("") @>
                                  nfsPermissionFixer:
                                    enabled: <@ additionalInput.volumes.sharedHome.nfsPermissionFixer.enabled | default(false) @>
                                    mountPath: <@ additionalInput.volumes.sharedHome.nfsPermissionFixer.mountPath | default("/shared-home") @>
                                    command: <@ additionalInput.volumes.sharedHome.nfsPermissionFixer.command | default([]) @>
                                additional: <@ additionalInput.volumes.additional | default([]) @>

                              nodeSelector: <@ additionalInput.nodeSelector | default({}) @>
                              tolerations: <@ additionalInput.tolerations | default([]) @>
                              affinity: <@ additionalInput.affinity | default({}) @>
                              additionalContainers: <@ additionalInput.additionalContainers | default([]) @>
                              additionalInitContainers: <@ additionalInput.additionalInitContainers | default([]) @>
                              additionalLabels: <@ additionalInput.additionalLabels | default({}) @>
                              additionalFiles: <@ additionalInput.additionalFiles | default([]) @>

                      - name: input-parameters
                        from: "{{inputs.artifacts.additional-parameters}}"
                      - name: configuration
                        raw:
                          data: |
                            prefix: additionalInput

              - - name: fill-input-in-module-args
                  capact-action: jinja2.template
                  arguments:
                    artifacts:
                      - name: template
                        from: "{{steps.render-bitbucket-helm-args.outputs.artifacts.render}}"
                      - name: input-parameters
                        from: "{{steps.fill-default-input.outputs.artifacts.render}}"
                      - name: configuration
                        raw:
                          data: |
                            prefix: input

              - - name: fill-installdb-params-in-helm-args
                  capact-action: jinja2.template
                  arguments:
                    artifacts:
                      - name: template
                        from: "{{steps.fill-input-in-module-args.outputs.artifacts.render}}"
                      - name: input-parameters
                        from: "{{steps.install-db.outputs.artifacts.postgresql}}"
                      - name: configuration
                        raw:
                          data: |
                            prefix: installdb

              - - name: fill-createdb-params-in-helm-args
                  capact-action: jinja2.template
                  arguments:
                    artifacts:
                      - name: template
                        from: "{{steps.fill-installdb-params-in-helm-args.outputs.artifacts.render}}"
                      - name: input-parameters
                        from: "{{steps.create-db.outputs.artifacts.database}}"
                      - name: configuration
                        raw:
                          data: "prefix: createdb"

              - - name: fill-user-params-in-helm-args
                  capact-action: jinja2.template
                  arguments:
                    artifacts:
                      - name: template
                        from: "{{steps.fill-createdb-params-in-helm-args.outputs.artifacts.render}}"
                      - name: input-parameters
                        from: "{{steps.create-user.outputs.artifacts.user}}"
                      - name: configuration
                        raw:
                          data: |
                            prefix: user

              - - name: fill-elasticsearch-params-in-helm-args
                  capact-action: jinja2.template
                  arguments:
                    artifacts:
                      - name: template
                        from: "{{steps.fill-user-params-in-helm-args.outputs.artifacts.render}}"
                      - name: input-parameters
                        from: "{{steps.install-elasticsearch.outputs.artifacts.elasticsearch}}"
                      - name: configuration
                        raw:
                          data: "prefix: elastic"

              - - name: fill-license-params-in-helm-args
                  capact-action: jinja2.template
                  arguments:
                    artifacts:
                      - name: template
                        from: "{{steps.fill-elasticsearch-params-in-helm-args.outputs.artifacts.render}}"
                      - name: input-parameters
                        from: "{{steps.create-license-secret.outputs.artifacts.manifest}}"
                      - name: configuration
                        raw:
                          data: "prefix: optionalLicense"

              - - name: fill-sysadmin-params-in-helm-args
                  capact-action: jinja2.template
                  arguments:
                    artifacts:
                      - name: template
                        from: "{{steps.fill-license-params-in-helm-args.outputs.artifacts.render}}"
                      - name: input-parameters
                        from: "{{steps.create-sysadmin-secret.outputs.artifacts.manifest}}"
                      - name: configuration
                        raw:
                          data: "prefix: optionalSysadmin"

              - - name: helm-install
                  capact-action: helm.install
                  capact-outputTypeInstances:
                    - name: bitbucket-config
                      from: additional
                    - name: bitbucket-helm-release
                      from: helm-release
                  arguments:
                    artifacts:
                      - name: input-parameters
                        from: "{{steps.fill-sysadmin-params-in-helm-args.outputs.artifacts.render}}"
                      - name: runner-context
                        from: "{{workflow.outputs.artifacts.runner-context}}"

          # You can always run custom images, we use the kubectl image to create a K8s resources
          # it will use the same serviceAccount as `helm install`
          - name: kubectl-create
            inputs:
              artifacts:
                - name: manifest
                  path: "/in/manifest.yaml"
            outputs:
              artifacts:
                - name: manifest
                  path: "/tmp/manifest.yaml"
            script:
              image: bitnami/kubectl:1.18
              command: [bash]
              source: |
                # Checking if manifest is not empty
                if grep -q '[^[:space:]]' "{{inputs.artifacts.manifest.path}}"; then

                echo "Creating Kubernetes resource..."
                kubectl create -f {{inputs.artifacts.manifest.path}} --output=yaml > {{outputs.artifacts.manifest.path}}

                else

                echo "Creating empty data as the input manifest is empty..."
                cat > "{{outputs.artifacts.manifest.path}}" <<-'EOF'
                metadata:
                  name: ""
                EOF

                fi
                # Known bug with PNS executor, which doesn't work when pod exists too early.
                sleep 1

signature:
  hub: eyJ0eXAiOiJKV1QiLA0KICJhbGciOiJIUzI1NiJ9
